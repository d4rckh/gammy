openapi: 3.0.1
info:
  title: gammy
  version: 1.0.0
paths:
  /achievements:
    get:
      operationId: getGameAchievements
      responses:
        "200":
          description: getGameAchievements 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameAchievementEntity"
    put:
      operationId: updateAchievement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameAchievementEntity"
        required: true
      responses:
        "200":
          description: updateAchievement 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameAchievementEntity"
    post:
      operationId: createAchievement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameAchievementEntity"
        required: true
      responses:
        "200":
          description: createAchievement 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameAchievementEntity"
    delete:
      operationId: deleteAchievement
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameAchievementEntity"
        required: true
      responses:
        "200":
          description: deleteAchievement 200 response
  /achievements/player/{playerId}:
    get:
      operationId: getAchievementStatusForPlayer
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getAchievementStatusForPlayer 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: boolean
  /achievements/player/{playerId}/{apiName}:
    post:
      operationId: unlockPlayerAchievement
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: apiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlockPlayerAchievement 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerAchievementEntity"
    delete:
      operationId: removePlayerAchievement
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: apiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: removePlayerAchievement 200 response
  /analytics:
    get:
      operationId: getGameAnalytics
      responses:
        "200":
          description: getGameAnalytics 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameAnalytics"
  /analytics/stat/{apiName}:
    get:
      operationId: getStatAnalytics
      parameters:
      - name: apiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getStatAnalytics 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatAnalytics"
  /interactions:
    get:
      operationId: getInteractions
      responses:
        "200":
          description: getInteractions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerInteractionEntity"
  /interactions/player/{playerId}:
    get:
      operationId: getPlayerInteractions
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getPlayerInteractions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerInteractionEntity"
  /interactions/track/{playerId}/{interactionApiName}:
    post:
      operationId: trackInteraction
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: interactionApiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: trackInteraction 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerInteractionEntity"
  /interactions/type:
    get:
      operationId: getGameInteractions
      responses:
        "200":
          description: getGameInteractions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameInteractionEntity"
    put:
      operationId: updateGameInteraction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameInteractionEntity"
        required: true
      responses:
        "200":
          description: updateGameInteraction 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameInteractionEntity"
    post:
      operationId: createInteraction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameInteractionEntity"
        required: true
      responses:
        "200":
          description: createInteraction 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameInteractionEntity"
    delete:
      operationId: deleteGameInteraction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameInteractionEntity"
        required: true
      responses:
        "200":
          description: deleteGameInteraction 200 response
  /interactions/type/{apiName}:
    get:
      operationId: getInteractionsByApiName
      parameters:
      - name: apiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getInteractionsByApiName 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerInteractionEntity"
  /leaderboards:
    get:
      operationId: getLeaderboards
      responses:
        "200":
          description: getLeaderboards 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LeaderboardEntity"
    put:
      operationId: updateLeaderboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaderboardEntity"
        required: true
      responses:
        "200":
          description: updateLeaderboard 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaderboardEntity"
    post:
      operationId: createLeaderboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaderboardCreateRequest"
        required: true
      responses:
        "200":
          description: createLeaderboard 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaderboardEntity"
    delete:
      operationId: deleteLeaderboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LeaderboardEntity"
        required: true
      responses:
        "200":
          description: deleteLeaderboard 200 response
  /leaderboards/{apiName}:
    get:
      operationId: getLeaderboardEntries
      parameters:
      - name: apiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getLeaderboardEntries 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaderboardEntries"
  /parameters:
    get:
      operationId: getParameters
      responses:
        "200":
          description: getParameters 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ParameterEntity"
    put:
      operationId: updateParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterEntity"
        required: true
      responses:
        "200":
          description: updateParameter 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterEntity"
    post:
      operationId: createParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterEntity"
        required: true
      responses:
        "200":
          description: createParameter 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ParameterEntity"
    delete:
      operationId: deleteParameter
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ParameterEntity"
        required: true
      responses:
        "200":
          description: deleteParameter 200 response
  /parameters/overrides:
    put:
      operationId: updatePlayerParameterOverride
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerParameterOverrideEntity"
        required: true
      responses:
        "200":
          description: updatePlayerParameterOverride 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerParameterOverrideEntity"
    post:
      operationId: createPlayerParameterOverride
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerOverrideParameterRequest"
        required: true
      responses:
        "200":
          description: createPlayerParameterOverride 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerParameterOverrideEntity"
    delete:
      operationId: deletePlayerParameterOverride
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerParameterOverrideEntity"
        required: true
      responses:
        "200":
          description: deletePlayerParameterOverride 200 response
  /parameters/overrides/{playerId}:
    get:
      operationId: getPlayerParameterOverrides
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getPlayerParameterOverrides 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerParameterOverrideEntity"
  /parameters/player/{playerId}:
    get:
      operationId: getParametersForPlayer
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getParametersForPlayer 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /players:
    get:
      operationId: findAll
      responses:
        "200":
          description: findAll 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerEntity"
    put:
      operationId: updatePlayer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerEntity"
        required: true
      responses:
        "200":
          description: updatePlayer 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerEntity"
    post:
      operationId: createPlayer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerRegistrationRequest"
        required: true
      responses:
        "200":
          description: createPlayer 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerEntity"
  /players/{playerId}:
    get:
      operationId: findById
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: findById 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerEntity"
  /reports:
    get:
      operationId: getReports
      responses:
        "200":
          description: getReports 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerReportEntity"
    post:
      operationId: reportPlayer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportPlayerRequest"
        required: true
      responses:
        "200":
          description: reportPlayer 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerReportEntity"
  /reports/by/{playerId}:
    get:
      operationId: getReportsBy
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getReportsBy 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerReportEntity"
  /reports/for/{playerId}:
    get:
      operationId: getReportsFor
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getReportsFor 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerReportEntity"
  /stats:
    get:
      operationId: getGameStats
      responses:
        "200":
          description: getGameStats 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameStatEntity"
    put:
      operationId: updateGameStat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameStatEntity"
        required: true
      responses:
        "200":
          description: updateGameStat 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameStatEntity"
    post:
      operationId: createGameStat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameStatEntity"
        required: true
      responses:
        "200":
          description: createGameStat 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameStatEntity"
    delete:
      operationId: deleteGameStat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GameStatEntity"
        required: true
      responses:
        "200":
          description: deleteGameStat 200 response
  /stats/player/{playerId}:
    get:
      operationId: getPlayerStats
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getPlayerStats 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PlayerStatEntity"
    post:
      operationId: updatePlayerStat
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlayerGameStatUpdateRequest"
        required: true
      responses:
        "200":
          description: updatePlayerStat 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerStatEntity"
  /stats/player/{playerId}/history:
    get:
      operationId: getPlayerStatHistory
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: getPlayerStatHistory 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatUpdateHistoryEntity"
  /stats/player/{playerId}/{statApiName}/history:
    get:
      operationId: getPlayerStatHistory_1
      parameters:
      - name: playerId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: statApiName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getPlayerStatHistory_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StatUpdateHistoryEntity"
  /user:
    get:
      operationId: me
      responses:
        "200":
          description: me 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
components:
  schemas:
    GameAchievementEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        name:
          type: string
        apiName:
          type: string
        description:
          type: string
        unlockExpression:
          type: string
          nullable: true
    GameAnalytics:
      required:
      - achievementsUnlockCount
      - interactionsCount
      - totalAchievements
      - totalPlayers
      - totalReports
      type: object
      properties:
        totalPlayers:
          type: integer
          format: int64
        totalAchievements:
          type: integer
          format: int64
        totalReports:
          type: integer
          format: int64
        interactionsCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        achievementsUnlockCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
    GameInteractionEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        apiName:
          type: string
        displayName:
          type: string
        streak:
          $ref: "#/components/schemas/GameInteractionStreak"
    GameInteractionStreak:
      type: string
      enum:
      - NONE
      - DAILY
    GameStatEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        apiName:
          type: string
        displayName:
          type: string
        description:
          type: string
        type:
          $ref: "#/components/schemas/GameStatType"
        defaultValue:
          type: number
        maxValue:
          type: number
          nullable: true
        minValue:
          type: number
          nullable: true
        maxChange:
          type: number
          nullable: true
        onlyIncrement:
          type: boolean
    GameStatType:
      type: string
      enum:
      - INTEGER
      - FLOAT
    LeaderboardCreateRequest:
      type: object
      properties:
        displayName:
          type: string
        apiName:
          type: string
        description:
          type: string
        sortMethod:
          $ref: "#/components/schemas/LeaderboardSortMethod"
        gameStatApiName:
          type: string
    LeaderboardEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        apiName:
          type: string
        displayName:
          type: string
        description:
          type: string
        sortMethod:
          $ref: "#/components/schemas/LeaderboardSortMethod"
        gameStat:
          $ref: "#/components/schemas/GameStatEntity"
    LeaderboardEntries:
      required:
      - entries
      - leaderboard
      type: object
      properties:
        leaderboard:
          $ref: "#/components/schemas/LeaderboardEntity"
        entries:
          type: array
          items:
            $ref: "#/components/schemas/LeaderboardEntry"
    LeaderboardEntry:
      required:
      - player
      - rank
      - value
      type: object
      properties:
        player:
          $ref: "#/components/schemas/PlayerEntity"
        value:
          type: number
        rank:
          type: integer
          format: int64
    LeaderboardSortMethod:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    ParameterEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        path:
          type: string
        type:
          $ref: "#/components/schemas/ParameterType"
        value:
          type: string
    ParameterType:
      type: string
      enum:
      - STRING
      - FLOAT
      - INTEGER
      - BOOLEAN
    PlayerAchievementEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        gameAchievement:
          $ref: "#/components/schemas/GameAchievementEntity"
        player:
          $ref: "#/components/schemas/PlayerEntity"
        createdAt:
          type: string
          format: date-time
    PlayerEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        username:
          type: string
        hashedPassword:
          type: string
        banned:
          type: boolean
    PlayerGameStatUpdateMethod:
      type: string
      enum:
      - LOWEST
      - LARGEST
      - FORCE
    PlayerGameStatUpdateRequest:
      type: object
      properties:
        gameStatApiName:
          type: string
        newValue:
          type: number
        updateMethod:
          $ref: "#/components/schemas/PlayerGameStatUpdateMethod"
    PlayerInteractionEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        gameInteraction:
          $ref: "#/components/schemas/GameInteractionEntity"
        player:
          $ref: "#/components/schemas/PlayerEntity"
        timestamp:
          type: string
          format: date-time
        streak:
          type: integer
          format: int64
    PlayerOverrideParameterRequest:
      type: object
      properties:
        value:
          type: string
        path:
          type: string
        playerId:
          type: integer
          format: int64
    PlayerParameterOverrideEntity:
      type: object
      properties:
        path:
          type: string
        id:
          type: integer
          format: int64
          nullable: true
        parameter:
          $ref: "#/components/schemas/ParameterEntity"
        player:
          $ref: "#/components/schemas/PlayerEntity"
        value:
          type: string
    PlayerRegistrationRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    PlayerReportEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        reporterPlayer:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/PlayerEntity"
        reportedPlayer:
          $ref: "#/components/schemas/PlayerEntity"
        text:
          type: string
    PlayerStatEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        gameStat:
          $ref: "#/components/schemas/GameStatEntity"
        player:
          $ref: "#/components/schemas/PlayerEntity"
        value:
          type: number
        lastUpdate:
          type: string
          format: date-time
    ReportPlayerRequest:
      required:
      - reportedPlayerId
      - reporterPlayerId
      - text
      type: object
      properties:
        reporterPlayerId:
          type: integer
          format: int64
        reportedPlayerId:
          type: integer
          format: int64
        text:
          type: string
    StatAnalytics:
      required:
      - averageValue
      - distributionOfValues
      - mostCommonValue
      - percentAboveAverage
      - standardDeviation
      - totalNonDefaultEntries
      type: object
      properties:
        totalNonDefaultEntries:
          type: integer
          format: int64
        averageValue:
          type: number
          format: float
        standardDeviation:
          type: number
          format: float
        distributionOfValues:
          type: object
          additionalProperties:
            type: integer
            format: int64
        mostCommonValue:
          type: number
        percentAboveAverage:
          type: number
          format: float
    StatUpdateHistoryEntity:
      required:
      - gameStat
      - id
      - newValue
      - oldValue
      - player
      - suspicious
      - timestamp
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: true
        player:
          $ref: "#/components/schemas/PlayerEntity"
        gameStat:
          $ref: "#/components/schemas/GameStatEntity"
        oldValue:
          type: number
        newValue:
          type: number
        timestamp:
          type: string
          format: date-time
        suspicious:
          type: boolean
